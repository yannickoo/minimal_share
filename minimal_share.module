<?php

/**
 * @file
 * Main file of Minimal Share module.
 */

/**
 * Implements hook_menu().
 */
function minimal_share_menu() {
  $items = array();

  $items['admin/config/user-interface/minimal-share'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Minimal Share',
    'description' => 'Configure appearance of sharing links.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('minimal_share_config_form'),
    'access arguments' => array('administer minimal share'),
    'file' => 'minimal_share.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function minimal_share_permission() {
  return array(
    'administer minimal share' => array(
      'title' => t('Administer Minimal Share'),
      'description' => t('Set global settings for Minimal Share.'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function minimal_share_help($path, $arg) {
  if ($path == 'admin/config/user-interface/minimal-share') {
    return '<p>' . t('Enable desired services and select the label. Do not getting confused by the different numbers they are just for demonstrating a count.') . '</p>';
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function minimal_share_field_extra_fields() {
  $extra = array();
  $entity_info = entity_get_info();

  foreach ($entity_info['node']['bundles'] as $bundle => $fields) {
    $extra['node'][$bundle]['display']['minimal_share'] = array(
      'label' => t('Minimal Share'),
      'weight' => 10,
    );
  }

  return $extra;
}

/**
 * Implements hook_block_info().
 */
function minimal_share_block_info() {
  $blocks = array();

  $blocks['minimal_share'] = array(
    'info' => t('Minimal Share'),
  );

  return $blocks;
}

/**
 * Implements hook_entity_view().
 */
function minimal_share_entity_view($entity, $type, $view_mode, $langcode) {
  list(, , $bundle) = entity_extract_ids($type, $entity);
  $extra_fields = field_extra_fields_get_display($type, $bundle, $view_mode);

  if (isset($extra_fields['minimal_share']) && $extra_fields['minimal_share']['visible']) {
    $entity->content['minimal_share'] = minimal_share_field($type, $entity);
  }
}

/**
 * Implements hook_block_view().
 */
function minimal_share_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'minimal_share':
      $block['content'] = minimal_share();
      break;
  }

  return $block;
}

/**
 * Implements hook_element_info().
 */
function minimal_share_element_info() {
  return array(
    'minimal_share_container' => array(
      '#tag' => 'p',
      '#attributes' => array(),
      '#theme_wrappers' => array(
        'minimal_share_container',
      ),
    ),
    'minimal_share_item' => array(
      '#theme' => 'minimal_share_item',
      '#service_name' => NULL,
      '#service' => NULL,
      '#title' => NULL,
      '#url' => NULL,
      '#pre_render' => array(
        'minimal_share_pre_render_item',
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function minimal_share_theme() {
  return array(
    'minimal_share_container' => array(
      'render element' => 'element',
    ),
    'minimal_share_item' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Extra field callback.
 */
function minimal_share_field($entity_type, $entity) {
  $uri = entity_uri($entity_type, $entity);
  $front_page = variable_get('site_frontpage', 'node');
  $path = $uri['path'] == $front_page ? '' : $uri['path'];
  $url = url($path, array('absolute' => TRUE));
  $title = entity_label($entity_type, $entity);
  $settings = minimal_share_settings();
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $default_params = array(
    'title' => $title,
    'url' => $url,
  );

  foreach ($settings['services'] as &$service) {
    if (!empty($service['params'])) {
      foreach ($service['params'] as $param => $value) {
        if ($param == '_override') {
          continue;
        }

        // Provide default values for 'title' and 'url'.
        if (in_array($param, array('title', 'url')) && !$value) {
          $value = $default_params[$param];
        }

        // Check whether configuration is overridden.
        if (!empty($service['params']['_override'][$param])) {
          $value = $service['params']['_override'][$param];
        }

        // Check whether config for this entity bundle is overridden.
        if (!empty($service['params']['_override']['entity_types'][$entity_type]['_enabled'][$bundle]) &&
            $service['params']['_override']['entity_types'][$entity_type][$bundle][$param]) {
          $value = $service['params']['_override']['entity_types'][$entity_type][$bundle][$param];
        }

        // Replace tokens, strip tags and encode string.
        $value = token_replace($value, array($entity_type => $entity), array('clear' => TRUE));
        $value = drupal_encode_path(strip_tags($value));

        // Replace param in final sharing URL.
        $service['url'] = str_replace('[' . $param . ']', $value, $service['url']);
      }
    }
  }

  // Get renderable array for widget.
  $element = minimal_share($url, $title, $settings);

  return $element;
}

/**
 * Service definitions.
 *
 * @return array
 *   An array with all service definitions.
 */
function minimal_share_services() {
  $services = array();

  foreach (module_implements('minimal_share_services') as $module) {
    $services += module_invoke($module, 'minimal_share_services');
  }

  return $services;
}

/**
 * Implements hook_minimal_share_services().
 */
function minimal_share_minimal_share_services() {
  $services = array(
    'facebook' => array(
      'title' => t('Facebook'),
      'url' => 'https://www.facebook.com/sharer.php?u=[url]',
      'size' => array('width' => '600', 'height' => '500'),
      'icon' => TRUE,
      'unicode' => '59392',
      'params' => array('url'),
      'count_callback' => 'minimal_share_facebook_count',
    ),
    'twitter' => array(
      'title' => t('Twitter'),
      'url' => 'https://twitter.com/intent/tweet?status=[title]%20-%20[url]',
      'size' => array('width' => '600', 'height' => '260'),
      'icon' => TRUE,
      'unicode' => '59394',
      'params' => array('url', 'title'),
      'count_callback' => 'minimal_share_twitter_count',
    ),
    'gplus' => array(
      'title' => t('Google+'),
      'url' => 'https://plus.google.com/share?url=[url]',
      'size' => array('width' => '600', 'height' => '400'),
      'icon' => TRUE,
      'unicode' => '59395',
      'params' => array('url'),
      'count_callback' => 'minimal_share_gplus_count',
    ),
    'linkedin' => array(
      'enabled' => FALSE,
      'title' => t('LinkedIn'),
      'url' => 'http://www.linkedin.com/shareArticle?mini=true&url=[url]&title=[title]',
      'size' => array('width' => '520', 'height' => '570'),
      'icon' => TRUE,
      'unicode' => '59396',
      'params' => array('url', 'title'),
      'count_callback' => 'minimal_share_linkedin_count',
    ),
    'pinterest' => array(
      'enabled' => FALSE,
      'title' => t('Pinterest'),
      'url' => 'http://pinterest.com/pin/create/button/?url=[url]&description=[title]&media=[media]',
      'size' => array('width' => '1000', 'height' => '600'),
      'icon' => TRUE,
      'unicode' => '59397',
      'params' => array('url', 'title', 'media'),
    ),
    'tumblr' => array(
      'enabled' => FALSE,
      'title' => t('Tumblr'),
      'url' => 'https://www.tumblr.com/share/link?url=[url]&name=[title]&description=[description]',
      'size' => array('width' => '455', 'height' => '455'),
      'icon' => TRUE,
      'unicode' => '59398',
      'params' => array('url', 'title', 'description'),
    ),
    'whatsapp' => array(
      'enabled' => FALSE,
      'title' => t('WhatsApp'),
      'url' => 'whatsapp://send?text=[title]%20-%20[url]',
      'size' => array('width' => '455', 'height' => '455'),
      'icon' => TRUE,
      'unicode' => '59400',
      'params' => array('url', 'title'),
      'mobile' => TRUE,
    ),
    'email' => array(
      'enabled' => FALSE,
      'title' => t('Email'),
      'url' => 'mailto:?subject=[title]&body=[url]',
      'icon' => TRUE,
      'unicode' => '59393',
      'params' => array('url', 'title'),
    ),
    'print' => array(
      'enabled' => FALSE,
      'title' => t('Print'),
      'url' => '',
      'icon' => TRUE,
      'unicode' => '59399',
    ),
  );

  return $services;
}

/**
 * Function to render a Minimal Share widget.
 *
 * @param string $url
 *   The URL to share.
 * @param string $title
 *   The title of the shared thing.
 * @param array $settings
 *   An overridden configuration.
 *
 * @return array
 *   A renderable array for the widget.
 */
function minimal_share($url = '', $title = '', $settings = array()) {
  if (!count($settings)) {
    // Get all available service information.
    $settings = minimal_share_settings();
  }

  // Provide default URL if it was not passed.
  if (!$url) {
    $url = url(current_path(), array('absolute' => TRUE));
  }

  // Provide default title if it was not passed.
  if (!$title) {
    $title = drupal_get_title();

    // Use site name if there is no title.
    if (!$title) {
      $title = variable_get('site_name');
    }
  }

  $element = array(
    '#type' => 'minimal_share_container',
    '#attributes' => array('class' => array('minimal-share')),
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'minimal_share') . '/css/minimal-share.css',
      ),
      'js' => array(
        drupal_get_path('module', 'minimal_share') . '/js/minimal-share.js',
      ),
    ),
  );

  foreach ($settings['services'] as $service_name => $service) {
    $element[$service_name] = array(
      '#type' => 'minimal_share_item',
      '#service_name' => $service_name,
      '#service' => $service,
      '#title' => $title,
      '#url' => $url,
    );
  }

  return $element;
}

/**
 * Get Minimal Share settings.
 *
 * @param bool $alterable
 *   Whether services can be altered or not.
 *
 * @return array
 *   Contains settings.
 */
function minimal_share_settings($alterable = TRUE) {
  $settings = variable_get('minimal_share', array());
  $service_settings = isset($settings['services']) ? $settings['services'] : array();
  $services = minimal_share_services();

  // Clean up the params array, this is necessary because saving
  // the configuration form mess the keys up.
  foreach ($services as &$service) {
    if (!empty($service['params'])) {
      $params = array();

      foreach ($service['params'] as $param) {
        $params[$param] = '';
      }

      $service['params'] = $params;
    }
  }

  $settings['services'] = array_replace_recursive($services, $service_settings);

  $i = 0;
  foreach ($settings['services'] as &$service) {
    if (!isset($service['weight'])) {
      $service['weight'] = $i;
    }

    if (isset($service['enabled'])) {
      if (is_array($service['enabled'])) {
        $service['enabled'] = $service['enabled'][1];
      }
    }
    else {
      $service['enabled'] = TRUE;
    }

    $i++;
  }

  // Allow other modules to alter available services.
  if ($alterable) {
    drupal_alter('minimal_share_services', $settings['services']);
  }

  uasort($settings['services'], 'minimal_share_sort_by_enabled');
  uasort($settings['services'], 'minimal_share_sort_by_weight');

  return $settings;
}

/**
 * Sort an array by weight function.
 */
function minimal_share_sort_by_weight($a, $b) {
  return minimal_share_sort_by_key('weight', $a, $b);
}

/**
 * Sort an array by enabled function.
 */
function minimal_share_sort_by_enabled($a, $b) {
  return minimal_share_sort_by_key('enabled', $a, $b, 'desc');
}

/**
 * Sort an array by key.
 *
 * @param string $key
 *   The key you want to sort by.
 * @param string $a
 *   First string for comparison.
 * @param string $b
 *   Second string for comparison.
 * @param string $order
 *   Whether you want to sort asc or desc.
 *
 * @return int
 *   The return of strcmp().
 */
function minimal_share_sort_by_key($key, $a, $b, $order = 'asc') {
  if ($order == 'asc') {
    return strcmp($a[$key], $b[$key]);
  }
  else {
    return strcmp($b[$key], $a[$key]);
  }
}

/**
 * Convert string to machine-readable name.
 *
 * @param string $str
 *   The string to convert.
 *
 * @return string
 *   The machine-readable string.
 */
function minimal_share_machine_name($str) {
  $machine_readable = drupal_strtolower($str);

  $machine_readable = preg_replace('@[^a-z0-9_]+@','_', $machine_readable);

  return $machine_readable;
}

/**
 * Load count for a URL.
 *
 * @param string $service_name
 *   The service you want to request.
 * @param string $url
 *   The specific URL.
 *
 * @return int
 *   The amount of shares.
 */
function minimal_share_count($service_name, $url) {
  $settings = variable_get('minimal_share', array());
  $services = minimal_share_services();
  $service = $services[$service_name];
  $cid = 'minimal_share:' . md5($service_name . $url);
  $data = &drupal_static(__FUNCTION__);

  if (!isset($data[$cid])) {
    $cache_lifetime = isset($settings['general']['cache_lifetime']) ? $settings['general']['cache_lifetime'] : 900;

    if ($cache_lifetime) {
      if ($cache = cache_get($cid)) {
        $data[$cid] = $cache->data;
      }
      else {
        $data[$cid] = minimal_share_count_callback($service, $url);

        cache_set($cid, (int) $data[$cid], 'cache', time() + $cache_lifetime);
      }
    }
    else {
      $data[$cid] = minimal_share_count_callback($service, $url);
    }
  }

  if ($data[$cid] > 999 && $data[$cid] <= 999999) {
    $data[$cid] = floor($data[$cid] / 1000) . 'k';
  }
  elseif ($data[$cid] > 999999) {
    $data[$cid] = floor($data[$cid] / 1000000) . 'm';
  }

  return $data[$cid];
}

/**
 * Check whether count callback is defined and exists.
 *
 * @param array $service
 *   Contains service settings.
 *
 * @return bool
 *   Whether count callback exists and is valid or not.
 */
function minimal_share_count_callback_exists(array $service) {
  return isset($service['count_callback']) && function_exists($service['count_callback']) ? TRUE : FALSE;
}

/**
 * Call count callback for a specific service.
 *
 * @param array $service
 *   Contains service settings.
 * @param string $url
 *   The requested URL.
 *
 * @return int
 *   The amount of shares.
 */
function minimal_share_count_callback(array $service, $url) {
  return isset($service['count_callback']) && function_exists($service['count_callback']) ? call_user_func_array($service['count_callback'], array($url)) : 0;
}

/**
 * Count callback for Facebook.
 *
 * @param string $url
 *   The requested URL.
 *
 * @return int
 *   The amount of shares.
 */
function minimal_share_facebook_count($url) {
  $count = 0;
  $request = drupal_http_request('http://graph.facebook.com/?id=' . $url);

  if (!isset($request->data)) {
    return $count;
  }

  $data = json_decode($request->data);
  $count = isset($data->shares) ? $data->shares : $count;

  return $count;
}

/**
 * Count callback for Twitter.
 *
 * @param string $url
 *   The requested URL.
 *
 * @return int
 *   The amount of shares.
 */
function minimal_share_twitter_count($url) {
  $count = 0;
  $request = drupal_http_request('http://cdn.api.twitter.com/1/urls/count.json?url=' . $url);

  if (!isset($request->data)) {
    return $count;
  }

  $data = drupal_json_decode($request->data);
  $count = isset($data['count']) ? $data['count'] : 0;

  return $count;
}

/**
 * Count callback for Google+.
 *
 * @param string $url
 *   The requested URL.
 *
 * @return int
 *   The amount of shares.
 */
function minimal_share_gplus_count($url) {
  $count = 0;
  $request = drupal_http_request('https://clients6.google.com/rpc', array('method' => 'POST', 'data' => '[{"method":"pos.plusones.get","id":"p","params":{"nolog":true,"id":"' . $url . '","source":"widget","userId":"@viewer","groupId":"@self"},"jsonrpc":"2.0","key":"p","apiVersion":"v1"}]'));

  if (!isset($request->data)) {
    return $count;
  }

  $data = drupal_json_decode($request->data);
  $count = isset($data[0]['result']['metadata']['globalCounts']['count']) ? $data[0]['result']['metadata']['globalCounts']['count'] : 0;

  return $count;
}

/**
 * Count callback for LinkedIn.
 *
 * @param string $url
 *   The requested URL.
 *
 * @return int
 *   The amount of shares.
 */
function minimal_share_linkedin_count($url) {
  $count = 0;
  $request = drupal_http_request('http://www.linkedin.com/countserv/count/share?url=' . $url . '&format=json');

  if (!isset($request->data)) {
    return $count;
  }

  $data = drupal_json_decode($request->data);
  $count = $data['count'];

  return $count;
}

/**
 * Default implementation of theme('minimal_share_item').
 */
function minimal_share_pre_render_item($element) {
  $service_name = $element['#service_name'];
  $service = $element['#service'];
  $url = $element['#url'];
  $title = $element['#title'];

  if (!$service['enabled']) {
    return array();
  }

  // Set default label type.
  if (!isset($service['label_type'])) {
    $service['label_type'] = 'name';
  }

  // Load count only if necessary.
  if ($service['label_type'] == 'name_count' || $service['label_type'] == 'custom' && strpos($service['custom'], '[count]') !== FALSE) {
    $count = minimal_share_count($service_name, $url);
  }

  switch ($service['label_type']) {
    case 'name':
      $element['#title'] = $service['title'];
      break;

    case 'icon':
      $element['#title'] = '';
      $element['#attached']['css'][] = drupal_get_path('module', 'minimal_share') . '/css/minimal-share-icons.css';
      break;

    case 'name_count':
      $element['#title'] = '<span class="title">' . $service['title'] . '</span>';

      if ($count || !$count && !$service['hide_zero']) {
        $element['#title'] .= ' <span class="count">(' . $count . ')</span>';
      }
      break;

    case 'custom':
      $label = $service['custom'];

      // Replace [count] token with real count.
      if (minimal_share_count_callback_exists($service) && strpos($service['custom'], '[count]') !== FALSE) {
        $label = str_replace('[count]', $count, $service['custom']);
      }

      $label = check_plain($label);

      // Replace [count] token with real count.
      if (strpos($service['custom'], '[icon]') !== FALSE) {
        $label = str_replace('[icon]', '<span class="icon">&#' . $service['unicode'] . ';</span>', $label);
        $element['#attached']['css'][] = drupal_get_path('module', 'minimal_share') . '/css/minimal-share-icons.css';
      }

      $element['#title'] = $label;
      break;
  }

  $link_options = array(
    'html' => TRUE,
    'external' => TRUE,
    'attributes' => array(
      'class' => array($service_name),
    ),
  );

  if ($service['label_type'] == 'icon') {
    $link_options['attributes']['class'][] = 'icon';
  }

  // Add data attributes for size.
  foreach (array('width', 'height') as $property) {
    if (isset($service['size'][$property])) {
      $link_options['attributes']['data-' . $property] = $service['size'][$property];
    }
  }

  // Add class to link if service is only enabled for mobile devices.
  if (isset($service['mobile']) && $service['mobile']) {
    $link_options['attributes']['class'][] = 'ms-mobile-only';
  }

  // Replace default values in the sharing URL.
  $element['#href'] = str_replace(array('[url]', '[title]'), array($url, $title), $service['url']);
  $element['#options'] = $link_options;
  return $element;
}

/**
 * Renders minimal_share container.
 */
function theme_minimal_share_container($variables) {
  $element = $variables['element'];

  $attributes = isset($element['#attributes']) ? drupal_attributes($element['#attributes']) : '';
  $output = '<' . $element['#tag'] . $attributes . '>';
  if (isset($element['#value_prefix'])) {
    $output .= $element['#value_prefix'];
  }
  $output .= $element['#children'];
  if (isset($element['#value'])) {
    $output .= $element['#value'];
  }
  if (isset($element['#value_suffix'])) {
    $output .= $element['#value_suffix'];
  }
  $output .= '</' . $element['#tag'] . ">\n";
  return $output;
}

/**
 * Renders minimal_share item.
 */
function theme_minimal_share_item($variables) {
  $element = $variables['element'];

  if (isset($element['#title']) && isset($element['#href']) && isset($element['#options'])) {
    return l($element['#title'], $element['#href'], $element['#options']);
  }
  return '';
}
